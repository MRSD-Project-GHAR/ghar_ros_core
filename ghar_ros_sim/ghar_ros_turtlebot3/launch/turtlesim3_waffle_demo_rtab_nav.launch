<?xml version="1.0" encoding="utf-8"?>

<launch>
  <!-- Start position of waffle robot in scene. -->
  <arg name="x_pos" default="0.0" doc="Starting x coordinate of the robot in the simulation scene. "/>
  <arg name="y_pos" default="0.0"  doc="Starting y coordinate of the robot in the simulation scene. "/>
  <arg name="z_pos" default="0.6"  doc="Starting z coordinate of the robot in the simulation scene. "/>

  <!-- Start gazebo server with turtlebot3_house scene. -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- Documentation taken from http://gazebosim.org/tutorials?tut=ros_roslaunch-->
    <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/> -->
    <!-- <arg name="world_name" value="/home/madhu/empty_house_with_floor.world"/> -->
    <arg name="world_name" value="/home/madhu/empty_house_changed_origin_with_floor.world"/>
    <arg name="paused" value="false"/> <!--S tart Gazebo in a paused state-->
    <arg name="use_sim_time" value="true"/> <!-- Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock-->
    <arg name="gui" value="true"/> <!-- Launch the user interface window of Gazebo-->
    <arg name="headless" value="false"/> <!-- Enable gazebo state log recording-->
    <arg name="debug" value="false"/> <!-- Start gzserver (Gazebo Server) in debug mode using gdb-->
  </include>

  <!-- Load robot_description param for tf, rviz and gazebo spawn. -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_waffle.urdf.xacro"/>

  <!-- Spawn turtlebot into gazebo based on robot_description. -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model turtlebot3 -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description"/>

  <!-- Publish turtlebot3 tf's. -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="waffle_state_publisher"/>

  <!-- Publish tf 'base_footprint' as pose.-->
  <node pkg="elevation_mapping_demos" type="tf_to_pose_publisher.py" name="waffle_pose_publisher">
    <param name="from_frame" type="string" value="odom"/>
    <param name="to_frame" type="string" value="base_footprint"/>
  </node>
  
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_map" output="screen" args="0.0 0.0 0.0 0.0 0.0 0.0 /world /map" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_odom" args="-3.0 1.0 0.0 0.0 0.0 0.0 /map /odom" /> -->
  
  <!-- Run a passthrough filter to down-sample the sensor point cloud.-->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="/camera/depth/points"/>
    <remap from="~output" to="/camera/depth/points_downsampled"/>
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 6.0  <!-- Limit the range of points to forward to 6 meters in viewing direction-->
      filter_limit_negative: False
      leaf_size: 0.05  <!-- Limit the density to 5 cm-->
    </rosparam>
  </node>

  <!-- Launch elevation mapping node. -->
  <!-- <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/waffle_robot.yaml"/>
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml"/>
  </node> -->

  <!-- Arguments -->
  <env name="TURTLEBOT3_MODEL" value="waffle" />
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="open_rviz" default="true"/>
  <arg name="rtabmap_viz" default="true"/>
  <arg name="move_forward_only" default="false"/>

+
  <arg name="with_camera" default="true"/>
  
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    	 <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/ground_truth_demo.yaml" />
    	 <rosparam command="load" file="$(find elevation_mapping_demos)/config/elevation_maps/long_range.yaml" />
    	 <rosparam command="load" file="$(find elevation_mapping)/config/sensor_processors/perfect.yaml" />
    	 <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml" />
  </node>

  <node pkg="point_cloud_io" type="read" name="read_ply" output="screen">
		<!-- <param name="file_path" value="$(find elevation_mapping_demos)/sample_data/maze.ply" /> -->
		<!-- <param name="file_path" value="$(find elevation_mapping_demos)/sample_data/nsh-floor-A-april-3rd-no-tf.ply" /> -->
		<param name="file_path" value="$(find elevation_mapping_demos)/sample_data/rtab_house_gazebo_cloud.ply" />
		
		<param name="topic" value="/points" />
		<param name="frame" value="map" />
		<param name="rate" value="1.0" />
	</node>


  <!-- <arg name="localization" default="false"/>
  <arg name="database_path" default="~/.ros/rtabmap.db"/>
   -->
  <arg name="localization" default="false"/>
  <arg name="database_path" default="~/.ros/rtabmap.gazebo_house.db"/>
  <arg name="publish_cloud" default="true"/>
  <arg     if="$(arg localization)" name="rtabmap_args" default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args" default="-d"/>

  <!-- Turtlebot3 -->
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
  </include>

  <group ns="rtabmap">
    <node if="$(eval model=='waffle')" pkg="rtabmap_sync" type="rgbd_sync" name="rgbd_sync" output="screen">
      <remap from="rgb/image"         to="/camera/rgb/image_raw"/>
      <remap from="depth/image"       to="/camera/depth/image_raw"/>
      <remap from="rgb/camera_info"   to="/camera/rgb/camera_info"/>
    </node>

    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
      <param name="database_path"       type="string" value="$(arg database_path)"/>
      <param name="frame_id"            type="string" value="base_footprint"/>
      <param name="subscribe_rgb"   type="bool" value="false"/>
      <param name="subscribe_depth" type="bool" value="false"/>
      <param     if="$(eval model=='waffle')" name="subscribe_rgbd" type="bool" value="true"/>
      <param unless="$(eval model=='waffle')" name="subscribe_rgbd" type="bool" value="false"/>
      <param name="subscribe_scan"      type="bool"   value="true"/>
      <param name="approx_sync"         type="bool"   value="true"/>

      <!-- use actionlib to send goals to move_base -->
      <param name="use_action_for_goal" type="bool" value="true"/>
      <remap from="move_base"            to="/move_base"/>

      <!-- inputs -->
      <remap from="scan"            to="/scan"/>
      <remap from="odom"            to="/odom"/>
      <remap from="rgbd_image"       to="rgbd_image"/>

      <!-- output -->
      <remap from="grid_map" to="/map"/>

      <!-- RTAB-Map's parameters -->
      <param name="Reg/Strategy"                 type="string" value="1"/>
      <param name="Reg/Force3DoF"                type="string" value="true"/>
      <param name="GridGlobal/MinSize"           type="string" value="20"/>

      <!-- localization mode -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
    </node>

    <!-- visualization with rtabmap_viz -->
    <node if="$(arg rtabmap_viz)" pkg="rtabmap_viz" type="rtabmap_viz" name="rtabmap_viz" args="-d $(find rtabmap_demos)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_scan"   type="bool"   value="true"/>
      <param name="subscribe_odom"   type="bool"   value="true"/>
      <param name="frame_id"         type="string" value="base_footprint"/>
      <param name="approx_sync"      type="bool"   value="true"/>

      <remap from="odom"            to="/odom"/>
      <remap from="scan"            to="/scan"/>
    </node>
  </group>

  <!-- move_base -->
  <include file="$(find turtlebot3_navigation)/launch/move_base.launch">
    <arg name="model" value="$(arg model)" />
    <arg name="move_forward_only" value="$(arg move_forward_only)"/>
  </include>

  <!-- Launch RViz with the demo configuration. -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find elevation_mapping_demos)/rviz/turtlebot3_waffle_demo.rviz"/> -->

</launch>